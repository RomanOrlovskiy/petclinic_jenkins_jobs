pipeline {
    agent any

    environment {
        bucketName = "s3://epam-phase3-aws-cfn-petclinic"
        stackName = "epam-phase3-stack"
        templateFile = "master.yaml"
        albEndpoint = ""
        hostedZone = "Z2LRPVRK54W3FS"
        stackOutputName = "PetclinicServiceUrl"
        dnsRecordTemplate = "tests/record.json"
    }

    stages {

        //Retrieve cloudformation templates
        stage('Cloning Git repo') {
          steps {
              sshagent (credentials: ['464b0ae2-8c8a-4c41-9b8e-c34b1f5e76c5']) {
                        git branch: 'master', url: 'git@github.com:RomanOrlovskiy/aws-cfn-petclinic.git', credentialsId: '464b0ae2-8c8a-4c41-9b8e-c34b1f5e76c5'
                }
          }
        }

        stage ('Validate/Lint templates') {
            steps {
                script{

                  def SCRIPTS_LIST = sh (script: "find ./tests/*.sh", returnStdout: true).trim()
                  for(String script : SCRIPTS_LIST.split("\\r?\\n")){

                      def status = sh (script: "${script} &> output.txt", returnStatus: true)
                      println readFile('output.txt').trim()

                      if (status != 0) {
                        currentBuild.result = "FAILED"
                        error "Tests in script ${script} failed"
                      }
                      sh 'rm output.txt'

                  }

              }
          }
        }


        stage ('Copy templates to S3 bucket') {
            steps {
                println "Copying to S3"
                sh "aws s3 cp . ${bucketName} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --recursive --exclude '.git/*'"
            }
        }



        stage ('Deploy cfn template in AWS') {
            steps {
                println "Deploying the stack ${stackName}..."
                sh "aws cloudformation deploy --stack-name ${stackName} --template-file ${templateFile} --capabilities CAPABILITY_NAMED_IAM"
            }
        }

        stage ('Point subdomain to ALB endpoint'){
            steps {
                script {
                    //retrieve ALB URL from the stack
                    albEndpoint = sh (script: "aws cloudformation describe-stacks --stack-name ${stackName} --query 'Stacks[0].Outputs[?OutputKey==`${stackOutputName}`].OutputValue' --output text | sed 's;https://;;g'", returnStdout: true).trim()
                    //update json file with the new ALB URL
                    sh "sed -i 's/{ALB_URL_PLACEHOLDER}/dualstack.${albEndpoint}/g' ${dnsRecordTemplate}"

                    println "Updating subdomain to point to the ALB endpoint ${albEndpoint}..."
                    sh "aws route53 change-resource-record-sets --hosted-zone-id ${hostedZone} --change-batch file://${dnsRecordTemplate} 2>&1 > /dev/null"
                }
            }
        }


    }
}
