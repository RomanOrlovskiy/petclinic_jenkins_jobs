pipeline {
    agent any

    environment {
        bucketName = "s3://epam-phase3-aws-cfn-petclinic"
        stackName = "epam-phase3-stack"
        templateFile = "master.yaml"
    }

    stages {

        //Retrieve cloudformation templates
        stage('Cloning Git repo') {
          steps {
              sshagent (credentials: ['464b0ae2-8c8a-4c41-9b8e-c34b1f5e76c5']) {
                        git branch: 'master', url: 'git@github.com:RomanOrlovskiy/aws-cfn-petclinic.git', credentialsId: '464b0ae2-8c8a-4c41-9b8e-c34b1f5e76c5'
                }
          }
        }

        stage ('Validate syntax') {
            steps {
                script{
                    //Find all .yaml files and validate their syntax
                    def  FILES_LIST = sh (script: "find . -name '*.yaml'", returnStdout: true).trim()
                    for(String file : FILES_LIST.split("\\r?\\n")){
                        println sh(script: "aws cloudformation validate-template --template-body file://${file}", returnStdout: true)
                    }
                }

            }
        }

        stage ('cfn-lint') {
            steps {
                script {
                    println sh(script: "/usr/bin/cfn-lint `find . -name '*.yaml'` --ignore-checks W2509", returnStdout: true)
                }
            }
        }

        //Ask for user confirmation to continue the deployment

        stage('Decide on stack deployment') {
          steps {
            script {
              env.DEPLOY_STACK = input message: 'User input required',
                  parameters: [choice(name: 'Deploy stack to AWS', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this stack')]
            }
          }
        }


        stage ('Copy templates to S3 bucket') {
            when {
                environment name: 'DEPLOY_STACK', value: 'yes'
            }
            steps {
                println "Copying to S3"
                sh "aws s3 cp . ${bucketName} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --recursive --exclude '.git/*'"
            }
        }



        stage ('Deploy cfn template in AWS') {
            when {
                environment name: 'DEPLOY_STACK', value: 'yes'
            }
            steps {
                println "Deploying the stack ${stackName}..."
                sh "aws cloudformation deploy --stack-name ${stackName} --template-file ${templateFile} --capabilities CAPABILITY_NAMED_IAM"
            }
        }


    }
}
